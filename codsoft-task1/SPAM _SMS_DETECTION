import pandas as pd
import numpy as np
import re
import string
import joblib
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        if "spam" in filename.lower():  # Adjust the condition as needed
            dataset_path = os.path.join(dirname, filename)
            print(f"Dataset found: {dataset_path}")

df = pd.read_csv(dataset_path, encoding='latin-1')
df = df.iloc[:, [0, 1]]
df.columns = ['label', 'message']
df['label'] = df['label'].map({'ham': 0, 'spam': 1})

def clean_text(text):
    text = text.lower()
    text = re.sub(f"[{string.punctuation}]", "", text)
    text = re.sub(r"\d+", "", text)
    return text

df['message'] = df['message'].apply(clean_text)

X_train, X_test, y_train, y_test = train_test_split(df['message'], df['label'], test_size=0.2, random_state=42)

vectorizer = TfidfVectorizer()
X_train_vec = vectorizer.fit_transform(X_train)
X_test_vec = vectorizer.transform(X_test)

models = {
    "Naive Bayes": MultinomialNB(),
    "Logistic Regression": LogisticRegression(),
    "SVM": SVC()
}

for name, model in models.items():
    model.fit(X_train_vec, y_train)
    y_pred = model.predict(X_test_vec)
    print(f'{name} Accuracy: {accuracy_score(y_test, y_pred):.4f}')
    print(classification_report(y_test, y_pred))
    joblib.dump(model, f"{name.replace(' ', '_').lower()}_classifier.pkl")

joblib.dump(vectorizer, "tfidf_vectorizer.pkl")

kaggle_username = "janasruthin"  
notebook_name = "spam-sms-detection" 
dest_path = "/kaggle/working"

print("\nRun the following command to save outputs in Kaggle:")
print(f"kaggle kernels output {kaggle_username}/{notebook_name} -p {dest_path}")

